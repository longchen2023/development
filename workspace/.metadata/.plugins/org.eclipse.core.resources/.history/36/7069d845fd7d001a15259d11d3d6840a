package com.example.izakaya.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.izakaya.dao.CommmentManageDao;
import com.example.izakaya.dao.IzakayaManageDao;
import com.example.izakaya.dao.UserInfoManageDao;
import com.example.izakaya.entity.CommentInfo;
import com.example.izakaya.entity.IzakayaInfo;
import com.example.izakaya.entity.UserInfo;
import com.example.izakaya.model.IzakayaForm;
import com.example.izakaya.model.PasswordForm;
import com.example.izakaya.model.UserForm;
import com.example.izakaya.util.CommonUtils;

/**
 * 管理サービス.
 * 
 * @author 双江
 *
 */
@Service
public class IzakayaManageService {

	@Autowired
	UserInfoManageDao userInfoManageDao;
	@Autowired
	IzakayaManageDao izakayaManageDao;
	@Autowired
	CommmentManageDao commmentManageDao;
	

	/**
	 * ログイン情報をチェックする.
	 * 
	 * @param name ユーザ名前
	 * @param password ユーザパスワード
	 * @return OK：true NG: false
	 */
	public boolean checkLoginInfo(String name,String password) {

		// DBから該当情報を取得する
		UserInfo userInfo = userInfoManageDao.findByIdAndPassword(name, password);
		return userInfo == null ? false : true;
	}
	
	/**
	 * パスワード変更処理.
	 * 
	 * @param PasswordForm パスワード変更form
	 * @return OK：true NG: false
	 */
	@Transactional
	public boolean checkAndUpdateManageInfo(PasswordForm passwordForm) {

		boolean updateResult = true;
		// DBから該当情報を取得する
		UserInfo userInfo = userInfoManageDao.findByIdAndPassword(passwordForm.getUserId(), passwordForm.getOldPassword());
		if(userInfo == null) {
			updateResult = false;
		}else {
			try {
				userInfoManageDao.updateManageInfo(passwordForm.getUserId(),passwordForm.getNewPassword());
			}
			catch (Exception e) {
				// 変更が失敗した場合、fasleを設定
				updateResult = false;
			}
		}
		return updateResult;
	}

	
	/**
	 * 居酒屋の一覧情報を取得する.
	 * @return 居酒屋の一覧情報
	 */
	public List<IzakayaInfo> getIzakayaList(){
		
		//居酒屋の一覧情報を取得する
		List<IzakayaInfo> resultList =  izakayaManageDao.selectIzakayaList();
		if(resultList == null) {
			resultList = new ArrayList<IzakayaInfo>();
		}
		return resultList;
	}
	
	/**
	 * 居酒屋の情報を取得する.
	 * @return 居酒屋の情報
	 */
	public IzakayaInfo getIzakayaById(String id){
		
		//居酒屋の情報を取得する
		final IzakayaInfo izakayaInfo = izakayaManageDao.selectIzakayaById(id);
		return izakayaInfo;
	}

	/**
	 * 居酒屋情報を登録する.
	 * 
	 * @param izakayaForm 居酒屋情報
	 * @param userId      ユーザID
	 * @return success/failure
	 */
	@Transactional
	public boolean registerIzakaya(IzakayaForm izakayaForm, String userId) {

		// 登録結果
		boolean registerIsOk = true;
		// ローカル時間を取得する
		final String localDateTime = CommonUtils.getNowDateTime(null);

		// sequenceを取得
		final String id = izakayaManageDao.selectNextVal();
		try {
			// 居酒屋情報をDBに登録する
			izakayaManageDao.insertIzakayaInfo(id, userId, izakayaForm.getShopName(), izakayaForm.getArea(),
					izakayaForm.getGenre(), izakayaForm.getAddress(), izakayaForm.getTele(),
					izakayaForm.getMaxNumOfPeople(), izakayaForm.getPrice(), izakayaForm.getOpenTime(),
					izakayaForm.getCloseTime(), izakayaForm.getHoliday(), izakayaForm.getUrl(), localDateTime, null);
		} catch (Exception e) {
			// 登録が失敗した場合、fasleを設定
			registerIsOk = false;
		}

		return registerIsOk;
	}
	
	/**
	 * 居酒屋情報を修正する.
	 * 
	 * @param izakayaForm 居酒屋情報
	 * @param userId      ユーザID
	 * @return success/failure
	 */
	@Transactional
	public boolean updateIzakaya(IzakayaForm izakayaForm, String userId) {

		// 修正結果
		boolean updateIsOk = true;
		// ローカル時間を取得する
		final String localDateTime = CommonUtils.getNowDateTime(null);
		try {
			// 居酒屋情報をDBにアップデートする
			izakayaManageDao.updateIzakayaInfo(String.valueOf(izakayaForm.getNo()), userId, izakayaForm.getShopName(), izakayaForm.getArea(),
					izakayaForm.getGenre(), izakayaForm.getAddress(), izakayaForm.getTele(),
					izakayaForm.getMaxNumOfPeople(), izakayaForm.getPrice(), izakayaForm.getOpenTime(),
					izakayaForm.getCloseTime(), izakayaForm.getHoliday(), izakayaForm.getUrl(), localDateTime);
		} catch (Exception e) {
			// 更新が失敗した場合、fasleを設定
			updateIsOk = false;
		}

		return updateIsOk;
	}
	
	/**
	 * 居酒屋情報を削除する.
	 * 
	 * @param izakayaForm 居酒屋情報
	 * @param id      居酒屋ID
	 * @return success/failure
	 */
	@Transactional
	public boolean deleteIzakaya(String id) {

		// 削除結果
		boolean deleteIsOk = true;
		try {
			// 関連コメントをDBから削除する
			commmentManageDao.deleteByIzakayaId(id);
			// 居酒屋情報をDBから削除する
			izakayaManageDao.deleteIzakayaInfo(id);
			
		} catch (Exception e) {
			// 削除が失敗した場合、fasleを設定
			deleteIsOk = false;
		}

		return deleteIsOk;
	}
	
	/**
	 * 居酒屋idより、居酒屋のコメント情報を取得する.
	 * @param id      居酒屋id
	 * @return 居酒屋のコメント情報
	 */
	public List<CommentInfo> getIzakayaCommentById(String id){
		
		//居酒屋の情報を取得する
		List<CommentInfo> comments = commmentManageDao.findByIzakayaId(id);
		if(comments == null) {
			comments = new ArrayList<CommentInfo>();
		}
		return comments;
	}
	
	/**
	 * 居酒屋コメントidより、居酒屋のコメント情報を削除する.
	 * @param id      居酒屋id
	 * @return 居酒屋のコメント情報
	 */
	public List<CommentInfo> deleteIzakayaCommentById(String[] id){
		
		//居酒屋の情報を取得する
		List<CommentInfo> comments = commmentManageDao.findByIzakayaId(id);
		if(comments == null) {
			comments = new ArrayList<CommentInfo>();
		}
		return comments;
	}

}
